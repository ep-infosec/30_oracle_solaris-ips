#!/usr/bin/python3.9

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
# Copyright (c) 2011, 2022, Oracle and/or its affiliates.


# NOTE: when modifying this file, especially for changes to
# the mercurial API make sure that the corresponding ON gate
# script, usr/src/tools/scripts/get_ts.py, is also updated.

# Create a dictionary (timestamps) mapping paths of python files in the modules
# directory to their timestamps.  If a file is modified, its timestamp is the
# filesystem timestamp.  If it's unchanged, its timestamp is the timestamp of
# the last changeset which modified it.

import os
import time
import mercurial.cmdutil as cmdutil
import mercurial.logcmdutil as logcmdutil
from mercurial import localrepo
from mercurial.ui import ui
from mercurial import encoding

myui = ui()
repo = localrepo.instance(myui, cmdutil.findrepo(encoding.getcwd()), False)

# Get the set of matching files in the working directory parent.
manifest = set(
    f
    for f in repo[b"."]
    if f.startswith(b"src/modules/") and f.endswith(b".py")
)

# Find out which files have changed.
status = repo.status()
modadd = status.added + status.modified

timestamps = {}

# Handle the modified files first: get their timestamps from the filesystem.
# Remove the filenames from "manifest" so that we don't look for their changeset
# timestamps in the next loop.
for f in modadd:
        if f in manifest:
                timestamps[f] = \
                    os.stat(os.path.join(repo.root, f)).st_mtime
                manifest.remove(f)

# Now walk backwards through the changesets from the working directory parent
# (making sure we don't look at changesets that aren't ancestors), and for each
# file that still needs a timestamp, grab it from the changeset and make sure we
# don't look at it again.
revswanted = [b'reverse(ancestors(.))']
walk_opts = logcmdutil.parseopts(ui, (), {b'rev': revswanted})
revs, differ = logcmdutil.getrevs(repo, walk_opts)

for rev in revs:
        ctx = repo[rev]
        for f in ctx.files():
                if f in manifest:
                        timestamps[f] = ctx.date()[0]
                        manifest.remove(f)

for name, stamp in timestamps.items():
        # This produces output that is consumed by setup.py, the types
        # returned here must be expected by the setup.py otherwise
        # the setup.py will default to the timestamp of the workspace.
        print(stamp, name.decode())

# Get the timestamp of the workspace.  If it's unmodified, then use the
# timestamp of the parent of the working directory, and the latest timestamp of
# the modified and added files if not.  (We would do removed, but we don't know
# when they were removed.)
if any(modadd):
        print(max((
            os.stat(os.path.join(repo.root, f)).st_mtime
            for f in modadd
        )), ".")
else:
        print(repo[b"."].date()[0], ".")
